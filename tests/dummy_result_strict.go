// +build strict

package tests

import (
	"github.com/hectorj/go-resultgen/resulterrors"
)

// File generated by github.com/hectorj/go-resultgen.

// DummyResult is a result type for Dummy.
// See https://en.wikipedia.org/wiki/Result_type .
type DummyResult interface {
	// GetError tells us if the result is an error or not (in which case it returns `nil`).
	GetError() error
	// GetDummy gives us the encapsulated result value. Panics if the result is actually an error.
	GetDummy() Dummy
	// isDummyResult is a dummy method, just here to make sure only our implementation satisfies the interface.
	isDummyResult()
}

func NewValidDummyResult(value Dummy) DummyResult {
	return dummyResult{
		value: value,
		err: nil,
		errWasChecked: new(bool),
	}
}

func NewFailedDummyResult(err error) DummyResult {
	if err == nil {
		panic(resulterrors.FailedResultFromNilError)
	}
	return dummyResult{
		err: err,
		errWasChecked: new(bool),
	}
}

type dummyResult struct {
	value Dummy
	err error
	errWasChecked *bool
}

func (r dummyResult) isDummyResult() {}

func (r dummyResult) GetError() error {
	(*r.errWasChecked) = true
	return r.err
}

func (r dummyResult) GetDummy() Dummy {
	if !(*r.errWasChecked) {
		panic(resulterrors.UnsafeGetValueError)
	}
	if r.err != nil {
		panic(r.err)
	}
	return r.value
}
